# -*- coding: utf-8 -*-
"""kerala lottery.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SX1AOu7trX2kKBROSKYHpvW06U3_ElSe
"""

import sys
print(sys.version)

pip install pycaret[full]

import sys
print(sys.version)

import pycaret

from google.colab import files
files.upload()

import pandas as pd
df=pd.read_csv('kerala lottery.csv')
df

df.isna().sum()

df.shape

print(df.count())

df["Place"].value_counts()

print(df.to_string())

import pandas as pd
pd.set_option('display.max_rows', None)

pd.set_option('display.max_columns', None)

pd.reset_option('display.max_rows')
pd.reset_option('display.max_columns')

df.sample(10)  # View random 10 rows

from sklearn.preprocessing import LabelEncoder

import pandas as pd
from sklearn.preprocessing import LabelEncoder

df = pd.read_csv('kerala lottery.csv')

df = pd.read_csv('kerala lottery.csv', encoding='utf-8')

df.columns

# labelEncoding "place'

le = LabelEncoder()
df['Place_Label'] = le.fit_transform(df['Place'])

mapping = dict(zip(le.classes_, le.transform(le.classes_)))
print(mapping)

df[['Place', 'Place_Label']].head(10)

Lottery = df.drop('Place',axis=1)

Lottery.head()

# labelEncoding "series'

le = LabelEncoder()
df['Series_label'] = le.fit_transform(df['Series'])

mapping = dict(zip(le.classes_, le.transform(le.classes_)))
print(mapping)

df[['Series', 'Series_label']].head(10)

Lottery= df.drop('Series', axis=1)

Lottery.head()

# labelEncoding "Serial'

le = LabelEncoder()
df['Serial_label'] = le.fit_transform(df['Serial'])

mapping = dict(zip(le.classes_, le.transform(le.classes_)))
print(mapping)

df.head()

df.tail()

Lottery= df.drop('Serial', axis=1)

Lottery.head()

import sklearn, pycaret, numpy, pandas, scipy
print("scikit-learn:", sklearn.__version__)
print("pycaret:", pycaret.__version__)
print("numpy:", numpy.__version__)
print("pandas:", pandas.__version__)
print("scipy:", scipy.__version__)

from setuptools import setup

import pycaret.regression as pr

s = pr.setup(data=Lottery, target='Place_Label', session_id=123)

import sklearn
import pycaret

print("sklearn:", sklearn.__version__)
print("pycaret:", pycaret.__version__)

# import RegressionExperiment and init the class
from pycaret.regression import RegressionExperiment
exp = RegressionExperiment()

# check the type of exp
type(exp)

# init setup on exp
exp.setup(Lottery, target = 'Place_Label', session_id = 123)

# compare baseline models
best_model = pr.compare_models()

pip install catboost

from pycaret.regression import *
setup(Lottery, target='Place_Label')

import catboost
print(catboost.__version__)

from pycaret.regression import *
setup(Lottery, target='Place_Label')

models()

best = create_model('rf')

plot_model(best, plot = 'residuals')

# plot feature importance
plot_model(best, plot = 'feature')

ada = create_model('ada')

print(ada)

lightgbm = create_model('lightgbm')

dt = create_model('dt')

tuned_ada = tune_model(create_model('ada'))

#tuned model object is stored in the variable 'tuned_dt'.
print(tuned_ada)

tuned_lightgbm = tune_model('lightgbm')

# Create the model first
lightgbm = create_model('lightgbm')

# Then tune the model object (not the string)
tuned_lightgbm = tune_model(lightgbm)

dt = create_model('dt')

tuned_ada = tune_model(create_model('ada'))

print(tuned_ada)

# Create the LightGBM model first
lightgbm_model = create_model('lightgbm')

# Then tune the model object (not the string)
tuned_lightgbm = tune_model(lightgbm_model)

tuned_dt = tune_model(create_model('dt'))

plot_model(tuned_lightgbm)

plot_model(tuned_lightgbm, plot = 'error')

plot_model(tuned_lightgbm, plot='feature')

evaluate_model(tuned_lightgbm)

predict_model(tuned_lightgbm);

final_lightgbm = finalize_model(tuned_lightgbm)

print(final_lightgbm)

predict_model(final_lightgbm);

save_model(final_lightgbm,'Final Lightgbm Model 08Feb2020')

saved_final_lightgbm = load_model('Final Lightgbm Model 08Feb2020')

# 1. Create the model
lightgbm = create_model('lightgbm')

# 2. Finalize the model
final_lightgbm = finalize_model(lightgbm)

# 3. Make predictions
unseen_predictions = predict_model(final_lightgbm, data=Lottery)
unseen_predictions.head()











